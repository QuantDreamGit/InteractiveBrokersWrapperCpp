#ifndef QUANTDREAMCPP_IBREQUESTIDS_H
#define QUANTDREAMCPP_IBREQUESTIDS_H

/**
 * @file IBRequestIds.h
 * @brief Request ID constants for Interactive Brokers API operations
 *
 * This file defines a centralized registry of request ID ranges used throughout the IB API wrapper.
 * Request IDs are integer identifiers that uniquely map API requests to their corresponding responses,
 * enabling proper correlation in IB's asynchronous callback-based architecture.
 *
 * **ID Range Organization:**
 * - **0-999**: Order management operations
 * - **1000-1999**: Contract operations (stocks, options, futures)
 * - **2000-2999**: Option chain requests
 * - **3000-3999**: Market data subscriptions
 * - **4000-4999**: Market data snapshots
 * - **5000-5999**: Position queries
 *
 * @note These are **base IDs**. Actual request IDs are typically generated by adding offsets or
 *       incrementing from these bases to handle multiple concurrent requests.
 *
 * @note IB requires request IDs to be unique across active requests within the same connection.
 *       Reusing IDs for completed requests is safe, but overlapping IDs will cause response mismatches.
 */

namespace IB::ReqId {

  // --------------------------------------------------------------------------
  // Order Management Base IDs
  // --------------------------------------------------------------------------

  /**
   * @brief Base ID for general order operations
   *
   * Starting point for order placement requests. Typically incremented for each new order.
   */
  constexpr int BASE_ORDER_ID = 0;

  /**
   * @brief ID range for querying individual open orders
   *
   * Used when requesting details of a specific open order by order ID.
   */
  constexpr int OPEN_ORDER_ID = 100;

  /**
   * @brief ID for requesting all open orders across the account
   *
   * Used with `reqAllOpenOrders()` to retrieve complete order book state.
   */
  constexpr int ALL_OPEN_ORDER_ID = 200;

  /**
   * @brief Base ID for order cancellation requests
   *
   * Used when cancelling individual orders via `cancelOrder()`.
   */
  constexpr int CANCEL_ORDER_ID = 300;

  /**
   * @brief ID for cancelling all active orders
   *
   * Used with `reqGlobalCancel()` to cancel all pending orders in one request.
   */
  constexpr int CANCEL_ALL_ORDER_ID = 400;

  // --------------------------------------------------------------------------
  // Contract Request Base IDs
  // --------------------------------------------------------------------------

  /**
   * @brief Base ID for general contract detail requests
   *
   * Starting point for `reqContractDetails()` calls. Increment for each unique contract query.
   */
  constexpr int BASE_CONTRACT_ID = 1000;

  /**
   * @brief ID range for stock contract queries
   *
   * Used when resolving stock contract details (e.g., getting conId for "AAPL").
   */
  constexpr int STOCK_CONTRACT_ID = 1100;

  /**
   * @brief ID range for option contract queries
   *
   * Used when resolving individual option contracts by strike/expiration/right.
   */
  constexpr int OPTION_CONTRACT_ID = 1200;

  /**
   * @brief ID range for futures contract queries
   *
   * Used when resolving futures contracts (e.g., ES, CL, GC) with specific expirations.
   */
  constexpr int FUTURE_CONTRACT_ID = 1300;

  /**
   * @brief ID for open market contract requests
   *
   * Reserved for special contract queries or market-wide contract operations.
   *
   * @note Current usage is undefined - reserved for future implementation.
   */
  constexpr int OPEN_MARKET_CONTRACT_ID = 1400;

  // --------------------------------------------------------------------------
  // Option Chain Base IDs
  // --------------------------------------------------------------------------

  /**
   * @brief Base ID for option chain requests
   *
   * Used when requesting complete option chains (all strikes/expirations) for an underlying.
   * Typically triggers multiple `contractDetails()` callbacks.
   */
  constexpr int OPTION_CHAIN_ID = 2000;

  /**
   * @brief ID range for option chain requests with Greeks
   *
   * Used when requesting option chains and immediately subscribing to Greeks/model data
   * for each contract in the chain.
   */
  constexpr int OPTION_CHAIN_GREEKS_ID = 2100;

  // --------------------------------------------------------------------------
  // Market Data Base IDs
  // --------------------------------------------------------------------------

  /**
   * @brief Base ID for streaming market data subscriptions
   *
   * Used with `reqMktData()` for live, continuous price/volume/Greeks updates.
   * Each subscription should increment this base to avoid ID collisions.
   *
   * @note Streaming subscriptions remain active until explicitly cancelled with `cancelMktData()`.
   */
  constexpr int MARKET_DATA_ID = 3000;

  /**
   * @brief Base ID for one-time market data snapshots
   *
   * Used with `reqMktData()` when `snapshot=true` parameter is set. The subscription
   * automatically cancels after receiving initial data, avoiding subscription fees.
   *
   * @note Snapshots are typically cheaper than streaming subscriptions but may have
   *       delayed or cached data depending on your market data permissions.
   */
  constexpr int SNAPSHOT_DATA_ID = 4000;

  // --------------------------------------------------------------------------
  // Position Management Base IDs
  // --------------------------------------------------------------------------

  /**
   * @brief Base ID for position queries
   *
   * Used with `reqPositions()` to retrieve current account positions. The same ID
   * can be reused for subsequent position requests as they are one-time queries.
   */
  constexpr int POSITION_ID = 5000;

} // namespace IB::ReqId

#endif  // QUANTDREAMCPP_IBREQUESTIDS_H
